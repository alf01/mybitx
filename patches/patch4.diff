From 065de16171523744396f7b0d90b6ea022937f966 Mon Sep 17 00:00:00 2001
From: alf01 <alf88191@gmail.com>
Date: Tue, 31 Jul 2018 10:05:58 +0300
Subject: [PATCH] added basic multiwallet support

---
 src/interfaces/node.cpp   | 16 ++++++++
 src/interfaces/node.h     |  5 +++
 src/interfaces/wallet.cpp | 13 +++++++
 src/interfaces/wallet.h   |  6 +++
 src/qt/bitcoin.cpp        | 24 ++++--------
 src/qt/bitcoingui.cpp     | 65 ++++++++++++++++++++++++++++++-
 src/qt/bitcoingui.h       |  9 +++++
 src/qt/rpcconsole.cpp     |  2 +-
 src/qt/walletmodel.cpp    | 11 ++++++
 src/qt/walletmodel.h      |  4 ++
 src/wallet/rpcwallet.cpp  | 35 ++++-------------
 src/wallet/wallet.cpp     | 57 +++++++++++++++++++++++++++
 src/wallet/wallet.h       |  7 ++++
 13 files changed, 207 insertions(+), 47 deletions(-)

diff --git a/src/interfaces/node.cpp b/src/interfaces/node.cpp
index db371d1..13ef766 100644
--- a/src/interfaces/node.cpp
+++ b/src/interfaces/node.cpp
@@ -229,6 +229,22 @@ class NodeImpl : public Node
         return wallets;
 #else
         throw std::logic_error("Node::getWallets() called in non-wallet build.");
+#endif
+    }
+    bool createWallet(const std::string& wallet_file, std::string& error, std::string& warning) override
+    {
+#ifdef ENABLE_WALLET
+        return CreateWallet(wallet_file, 0, error, warning) != nullptr;
+#else
+        throw std::logic_error("Node::createWallet() called in non-wallet build.");
+#endif
+    }
+    bool loadWallet(const std::string& wallet_file, std::string& error, std::string& warning) override
+    {
+#ifdef ENABLE_WALLET
+        return LoadWallet(wallet_file, error, warning) != nullptr;
+#else
+        throw std::logic_error("Node::loadWallet() called in non-wallet build.");
 #endif
     }
     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override
diff --git a/src/interfaces/node.h b/src/interfaces/node.h
index 8185c01..7d53496 100644
--- a/src/interfaces/node.h
+++ b/src/interfaces/node.h
@@ -176,6 +176,11 @@ public:
     //! Return interfaces for accessing wallets (if any).
     virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;
 
+    //! Attempts to create a wallet from file or directory.
+    virtual bool createWallet(const std::string& wallet_file, std::string& error, std::string& warning) = 0;
+     //! Attempts to load a wallet from file or directory.
+    virtual bool loadWallet(const std::string& wallet_file, std::string& error, std::string& warning) = 0;
+
     //! Register handler for init messages.
     using InitMessageFn = std::function<void(const std::string& message)>;
     virtual std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) = 0;
diff --git a/src/interfaces/wallet.cpp b/src/interfaces/wallet.cpp
index 55a6f77..24ef795 100644
--- a/src/interfaces/wallet.cpp
+++ b/src/interfaces/wallet.cpp
@@ -429,6 +429,19 @@ public:
     bool IsWalletFlagSet(uint64_t flag) override { return m_wallet.IsWalletFlagSet(flag); }
     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }
     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }
+    void unload() override
+    {
+        RemoveWallet(m_shared_wallet);
+        UnregisterValidationInterface(&m_wallet);
+         // The wallet can be in use so it's not possible to explicitly unload here.
+        // Just notify the unload intent so that all shared pointers are released.
+        // The wallet will be destroyed once the last shared pointer is released.
+        m_wallet.NotifyUnload();
+    }
+    std::unique_ptr<Handler> handleLoad(LoadFn fn) override
+    {
+        return MakeHandler(m_wallet.NotifyLoad.connect(fn));
+    }
     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override
     {
         return MakeHandler(m_wallet.NotifyUnload.connect(fn));
diff --git a/src/interfaces/wallet.h b/src/interfaces/wallet.h
index ae54d42..20ef782 100644
--- a/src/interfaces/wallet.h
+++ b/src/interfaces/wallet.h
@@ -245,6 +245,12 @@ public:
     // Get default change type.
     virtual OutputType getDefaultChangeType() = 0;
 
+    // Request wallet unload.
+    virtual void unload() = 0;
+    //! Register handler for load message.
+    using LoadFn = std::function<void()>;
+    virtual std::unique_ptr<Handler> handleLoad(LoadFn fn) = 0;
+
     //! Register handler for unload message.
     using UnloadFn = std::function<void()>;
     virtual std::unique_ptr<Handler> handleUnload(UnloadFn fn) = 0;
diff --git a/src/qt/bitcoin.cpp b/src/qt/bitcoin.cpp
index 5d0e384..ff4cc95 100644
--- a/src/qt/bitcoin.cpp
+++ b/src/qt/bitcoin.cpp
@@ -214,7 +214,6 @@ public Q_SLOTS:
     /// Handle runaway exceptions. Shows a message box with the problem and quits the program.
     void handleRunawayException(const QString &message);
     void addWallet(WalletModel* walletModel);
-    void removeWallet();
 
 Q_SIGNALS:
     void requestedInitialize();
@@ -438,25 +437,16 @@ void BitcoinApplication::addWallet(WalletModel* walletModel)
 #ifdef ENABLE_WALLET
     window->addWallet(walletModel);
 
-    if (m_wallet_models.empty()) {
-        window->setCurrentWallet(walletModel->getWalletName());
-    }
-
     connect(walletModel, SIGNAL(coinsSent(WalletModel*, SendCoinsRecipient, QByteArray)),
-        paymentServer, SLOT(fetchPaymentACK(WalletModel*, const SendCoinsRecipient&, QByteArray)));
-    connect(walletModel, SIGNAL(unload()), this, SLOT(removeWallet()));
+        paymentServer, SLOT(fetchPaymentACK(WalletModel*, const SendCoinsRecipient&, QByteArray)));    
 
-    m_wallet_models.push_back(walletModel);
-#endif
-}
+    connect(walletModel, &WalletModel::unload, [=]() {
+        m_wallet_models.erase(std::find(m_wallet_models.begin(), m_wallet_models.end(), walletModel));
+        window->removeWallet(walletModel);
+        walletModel->deleteLater();
+    });
 
-void BitcoinApplication::removeWallet()
-{
-#ifdef ENABLE_WALLET
-    WalletModel* walletModel = static_cast<WalletModel*>(sender());
-    m_wallet_models.erase(std::find(m_wallet_models.begin(), m_wallet_models.end(), walletModel));
-    window->removeWallet(walletModel);
-    walletModel->deleteLater();
+    m_wallet_models.push_back(walletModel);
 #endif
 }
 
diff --git a/src/qt/bitcoingui.cpp b/src/qt/bitcoingui.cpp
index c8f8b9c..81b7bf4 100644
--- a/src/qt/bitcoingui.cpp
+++ b/src/qt/bitcoingui.cpp
@@ -41,7 +41,9 @@
 #include <QComboBox>
 #include <QDateTime>
 #include <QDesktopWidget>
+#include <QDir>
 #include <QDragEnterEvent>
+#include <QFileDialog>
 #include <QListWidget>
 #include <QMenuBar>
 #include <QMessageBox>
@@ -322,6 +324,13 @@ void BitcoinGUI::createActions()
     openAction = new QAction(platformStyle->TextColorIcon(":/icons/open"), tr("Open &URI..."), this);
     openAction->setStatusTip(tr("Open a bitcoin: URI or payment request"));
 
+    m_new_wallet_action = new QAction(platformStyle->TextColorIcon(":/icons/open"), tr("New &Wallet..."), this);
+    m_new_wallet_action->setStatusTip(tr("Create a wallet"));
+    m_open_wallet_action = new QAction(platformStyle->TextColorIcon(":/icons/open"), tr("Open &Wallet..."), this);
+    m_open_wallet_action->setStatusTip(tr("Open a wallet"));
+    m_close_wallet_action = new QAction(platformStyle->TextColorIcon(":/icons/open"), tr("Close Wallet..."), this);
+    m_close_wallet_action->setStatusTip(tr("Close wallet..."));
+
     showHelpMessageAction = new QAction(platformStyle->TextColorIcon(":/icons/info"), tr("&Command-line options"), this);
     showHelpMessageAction->setMenuRole(QAction::NoRole);
     showHelpMessageAction->setStatusTip(tr("Show the %1 help message to get a list with possible Bitcoin command-line options").arg(tr(PACKAGE_NAME)));
@@ -347,6 +356,9 @@ void BitcoinGUI::createActions()
         connect(usedSendingAddressesAction, SIGNAL(triggered()), walletFrame, SLOT(usedSendingAddresses()));
         connect(usedReceivingAddressesAction, SIGNAL(triggered()), walletFrame, SLOT(usedReceivingAddresses()));
         connect(openAction, SIGNAL(triggered()), this, SLOT(openClicked()));
+        connect(m_new_wallet_action, &QAction::triggered, this, &BitcoinGUI::newWallet);
+        connect(m_open_wallet_action, &QAction::triggered, this, &BitcoinGUI::openWallet);
+        connect(m_close_wallet_action, &QAction::triggered, this, &BitcoinGUI::closeWallet);
     }
 #endif // ENABLE_WALLET
 
@@ -368,6 +380,9 @@ void BitcoinGUI::createMenuBar()
     QMenu *file = appMenuBar->addMenu(tr("&File"));
     if(walletFrame)
     {
+        file->addAction(m_new_wallet_action);
+        file->addAction(m_open_wallet_action);
+        file->addAction(m_close_wallet_action);
         file->addAction(openAction);
         file->addAction(backupWalletAction);
         file->addAction(signMessageAction);
@@ -506,7 +521,7 @@ bool BitcoinGUI::addWallet(WalletModel *walletModel)
     if(!walletFrame)
         return false;
     const QString name = walletModel->getWalletName();
-    QString display_name = name.isEmpty() ? "["+tr("default wallet")+"]" : name;
+    const QString display_name = walletModel->getDisplayName();
     setWalletActionsEnabled(true);
     m_wallet_selector->addItem(display_name, name);
     if (m_wallet_selector->count() == 2) {
@@ -514,7 +529,12 @@ bool BitcoinGUI::addWallet(WalletModel *walletModel)
         m_wallet_selector_action->setVisible(true);
     }
     rpcConsole->addWallet(walletModel);
-    return walletFrame->addWallet(walletModel);
+    bool res = walletFrame->addWallet(walletModel);
+    if (res) {
+        m_wallet_selector->setCurrentIndex(m_wallet_selector->count() - 1);
+        setCurrentWalletBySelectorIndex(m_wallet_selector->count() - 1);
+    }
+    return res;
 }
 
 bool BitcoinGUI::removeWallet(WalletModel* walletModel)
@@ -557,6 +577,7 @@ void BitcoinGUI::removeAllWallets()
 
 void BitcoinGUI::setWalletActionsEnabled(bool enabled)
 {
+    m_close_wallet_action->setEnabled(enabled);
     overviewAction->setEnabled(enabled);
     sendCoinsAction->setEnabled(enabled);
     sendCoinsMenuAction->setEnabled(enabled);
@@ -681,6 +702,46 @@ void BitcoinGUI::openClicked()
     }
 }
 
+void BitcoinGUI::newWallet()
+{
+    QString file_name = QFileDialog::getSaveFileName(this, tr("New Wallet"));
+    if (file_name.isEmpty()) return;
+     std::string error, warning;
+    if (!m_node.createWallet(QDir::toNativeSeparators(file_name).toStdString(), error, warning)) {
+        QMessageBox::information(this, tr("New Wallet"), QString::fromStdString(error));
+        return;
+    }
+    if (!warning.empty()) {
+        QMessageBox::information(this, tr("New Wallet"), QString::fromStdString(warning));
+    }
+}
+ void BitcoinGUI::openWallet()
+{
+    QString file_name = QFileDialog::getExistingDirectory(this, tr("Open Wallet"), QString(), QFileDialog::DontResolveSymlinks);
+    if (file_name.isEmpty()) return;
+     std::string error, warning;
+    if (!m_node.loadWallet(QDir::toNativeSeparators(file_name).toStdString(), error, warning)) {
+        QMessageBox::information(this, tr("Open Wallet"), QString::fromStdString(error));
+        return;
+    }
+    if (!warning.empty()) {
+        QMessageBox::information(this, tr("Open Wallet"), QString::fromStdString(warning));
+    }
+}
+ void BitcoinGUI::closeWallet()
+{
+    if (!walletFrame) return;
+     WalletView * const wallet_view = walletFrame->currentWalletView();
+    if (!wallet_view) return;
+     WalletModel * const wallet_model = wallet_view->getWalletModel();
+    QMessageBox::StandardButton retval = QMessageBox::question(this, tr("Close wallet"),
+             tr("Are you sure you wish to close wallet %1?").arg(wallet_model->getDisplayName()),
+             QMessageBox::Yes|QMessageBox::Cancel,
+             QMessageBox::Cancel);
+     if (retval != QMessageBox::Yes) return;
+     wallet_model->requestUnload();
+}
+
 void BitcoinGUI::gotoOverviewPage()
 {
     overviewAction->setChecked(true);
diff --git a/src/qt/bitcoingui.h b/src/qt/bitcoingui.h
index d7ca808..346ac5e 100644
--- a/src/qt/bitcoingui.h
+++ b/src/qt/bitcoingui.h
@@ -123,6 +123,9 @@ private:
     QAction* openRPCConsoleAction = nullptr;
     QAction* openAction = nullptr;
     QAction* showHelpMessageAction = nullptr;
+    QAction* m_new_wallet_action = nullptr;
+    QAction* m_open_wallet_action = nullptr;
+    QAction* m_close_wallet_action = nullptr;
     QAction* m_wallet_selector_label_action = nullptr;
     QAction* m_wallet_selector_action = nullptr;
 
@@ -236,6 +239,12 @@ private Q_SLOTS:
 
     /** Show open dialog */
     void openClicked();
+    /** New wallet dialog */
+    void newWallet();
+    /** Show open wallet dialog */
+    void openWallet();
+    /** Close current wallet */
+    void closeWallet();
 #endif // ENABLE_WALLET
     /** Show configuration dialog */
     void optionsClicked();
diff --git a/src/qt/rpcconsole.cpp b/src/qt/rpcconsole.cpp
index f222357..6f0edba 100644
--- a/src/qt/rpcconsole.cpp
+++ b/src/qt/rpcconsole.cpp
@@ -698,7 +698,7 @@ void RPCConsole::addWallet(WalletModel * const walletModel)
 {
     const QString name = walletModel->getWalletName();
     // use name for text and internal data object (to allow to move to a wallet id later)
-    QString display_name = name.isEmpty() ? "["+tr("default wallet")+"]" : name;
+    const QString display_name = walletModel->getDisplayName();
     ui->WalletSelector->addItem(display_name, name);
     if (ui->WalletSelector->count() == 2 && !isVisible()) {
         // First wallet added, set to default so long as the window isn't presently visible (and potentially in use)
diff --git a/src/qt/walletmodel.cpp b/src/qt/walletmodel.cpp
index cd55b40..9fe96fb 100644
--- a/src/qt/walletmodel.cpp
+++ b/src/qt/walletmodel.cpp
@@ -303,6 +303,11 @@ AddressTableModel *WalletModel::getAddressTableModel()
     return addressTableModel;
 }
 
+void WalletModel::requestUnload()
+{
+    m_wallet->unload();
+}
+
 TransactionTableModel *WalletModel::getTransactionTableModel()
 {
     return transactionTableModel;
@@ -568,6 +573,12 @@ QString WalletModel::getWalletName() const
     return QString::fromStdString(m_wallet->getWalletName());
 }
 
+QString WalletModel::getDisplayName() const
+{
+    const QString name = getWalletName();
+    return name.isEmpty() ? "["+tr("default wallet")+"]" : name;
+}
+
 bool WalletModel::isMultiwallet()
 {
     return m_node.getWallets().size() > 1;
diff --git a/src/qt/walletmodel.h b/src/qt/walletmodel.h
index d8935c2..785c8ac 100644
--- a/src/qt/walletmodel.h
+++ b/src/qt/walletmodel.h
@@ -203,10 +203,14 @@ public:
     interfaces::Wallet& wallet() const { return *m_wallet; }
 
     QString getWalletName() const;
+    QString getDisplayName() const;
 
     bool isMultiwallet();
 
     AddressTableModel* getAddressTableModel() const { return addressTableModel; }
+
+    void requestUnload();
+
 private:
     std::unique_ptr<interfaces::Wallet> m_wallet;
     std::unique_ptr<interfaces::Handler> m_handler_unload;
diff --git a/src/wallet/rpcwallet.cpp b/src/wallet/rpcwallet.cpp
index 73dfebf..c8beff7 100644
--- a/src/wallet/rpcwallet.cpp
+++ b/src/wallet/rpcwallet.cpp
@@ -3106,8 +3106,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)
             + HelpExampleCli("loadwallet", "\"test.dat\"")
             + HelpExampleRpc("loadwallet", "\"test.dat\"")
         );
-    std::string wallet_file = request.params[0].get_str();
-    std::string error;
+    std::string wallet_file = request.params[0].get_str();    
 
     fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());
     if (fs::symlink_status(wallet_path).type() == fs::file_not_found) {
@@ -3120,18 +3119,12 @@ static UniValue loadwallet(const JSONRPCRequest& request)
         }
     }
 
-    std::string warning;
-    if (!CWallet::Verify(wallet_file, false, error, warning)) {
-        throw JSONRPCError(RPC_WALLET_ERROR, "Wallet file verification failed: " + error);
-    }
+    std::string error, warning;
+    std::shared_ptr<CWallet> const wallet = LoadWallet(wallet_file, error, warning);
 
-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_file, fs::absolute(wallet_file, GetWalletDir()));
     if (!wallet) {
-        throw JSONRPCError(RPC_WALLET_ERROR, "Wallet loading failed.");
-    }
-    AddWallet(wallet);
-
-    wallet->postInitProcess();
+        throw JSONRPCError(RPC_WALLET_ERROR, error);
+    }    
 
     UniValue obj(UniValue::VOBJ);
     obj.pushKV("name", wallet->GetName());
@@ -3168,23 +3161,11 @@ static UniValue createwallet(const JSONRPCRequest& request)
         disable_privatekeys = request.params[1].get_bool();
     }
 
-    fs::path wallet_path = fs::absolute(wallet_name, GetWalletDir());
-    if (fs::symlink_status(wallet_path).type() != fs::file_not_found) {
-        throw JSONRPCError(RPC_WALLET_ERROR, "Wallet " + wallet_name + " already exists.");
-    }
-
-    // Wallet::Verify will check if we're trying to create a wallet with a duplication name.
-    if (!CWallet::Verify(wallet_name, false, error, warning)) {
-        throw JSONRPCError(RPC_WALLET_ERROR, "Wallet file verification failed: " + error);
-    }
+    std::shared_ptr<CWallet> const wallet = CreateWallet(wallet_name, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0), error, warning);
 
-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_name, fs::absolute(wallet_name, GetWalletDir()), (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));
     if (!wallet) {
-        throw JSONRPCError(RPC_WALLET_ERROR, "Wallet creation failed.");
-    }
-    AddWallet(wallet);
-
-    wallet->postInitProcess();
+        throw JSONRPCError(RPC_WALLET_ERROR, error);
+    }    
 
     UniValue obj(UniValue::VOBJ);
     obj.pushKV("name", wallet->GetName());
diff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp
index 4918100..b943650 100644
--- a/src/wallet/wallet.cpp
+++ b/src/wallet/wallet.cpp
@@ -79,6 +79,62 @@ std::shared_ptr<CWallet> GetWallet(const std::string& name)
     return nullptr;
 }
 
+static void GetWalletNameAndPath(const std::string& wallet_file, std::string& wallet_name, fs::path& wallet_path) {
+    wallet_path = fs::absolute(wallet_file, GetWalletDir());
+    fs::path name;
+    fs::path parent = wallet_path;
+    while (!parent.empty()) {
+        if (parent == GetWalletDir()) {
+            break;
+        }
+        name = parent.filename() / name;
+        parent = parent.parent_path();
+    }
+    wallet_name = name.string();
+}
+ std::shared_ptr<CWallet> CreateWallet(const std::string& wallet_file, uint64_t wallet_creation_flags, std::string& error, std::string& warning)
+{
+    fs::path wallet_path;
+    std::string wallet_name;
+    GetWalletNameAndPath(wallet_file, wallet_name, wallet_path);
+     if (fs::symlink_status(wallet_path).type() != fs::file_not_found) {
+        error = "Wallet " + wallet_name + " already exists.";
+        return nullptr;
+    }
+     // Wallet::Verify will check if we're trying to create a wallet with a duplication name.
+    if (!CWallet::Verify(wallet_file, false, error, warning)) {
+        error = "Wallet file verification failed: " + error;
+        return nullptr;
+    }
+     std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_name, wallet_path, wallet_creation_flags);
+    if (!wallet) {
+        error = "Wallet creation failed.";
+        return nullptr;
+    }
+     AddWallet(wallet);
+     wallet->postInitProcess();
+    return wallet;
+}
+std::shared_ptr<CWallet> LoadWallet(const std::string& wallet_file, std::string& error, std::string& warning)
+{
+    LOCK(cs_wallets);
+    fs::path wallet_path;
+    std::string wallet_name;
+    GetWalletNameAndPath(wallet_file, wallet_name, wallet_path);
+    if (!CWallet::Verify(wallet_file, false, error, warning)) {
+        error = "Wallet file verification failed: " + error;
+        return nullptr;
+    }
+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(wallet_name, wallet_path);
+    if (!wallet) {
+        error = "Wallet creation failed.";
+        return nullptr;
+    }
+    AddWallet(wallet);
+    wallet->postInitProcess();
+    return wallet;
+}
+
 // Custom deleter for shared_ptr<CWallet>.
 static void ReleaseWallet(CWallet* wallet)
 {
@@ -4301,6 +4357,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,
     }
 
     uiInterface.LoadWallet(walletInstance);
+    walletInstance->NotifyLoad();
 
     // Register with the validation interface. It's ok to do this after rescan since we're still holding cs_main.
     RegisterValidationInterface(walletInstance.get());
diff --git a/src/wallet/wallet.h b/src/wallet/wallet.h
index 9f9501c..a86c20f 100644
--- a/src/wallet/wallet.h
+++ b/src/wallet/wallet.h
@@ -39,6 +39,10 @@ bool HasWallets();
 std::vector<std::shared_ptr<CWallet>> GetWallets();
 std::shared_ptr<CWallet> GetWallet(const std::string& name);
 
+std::shared_ptr<CWallet> CreateWallet(const std::string& wallet_file, uint64_t wallet_creation_flags, std::string& error, std::string& warning);
+std::shared_ptr<CWallet> LoadWallet(const std::string& wallet_file, std::string& error, std::string& warning);
+
+
 //! Default for -keypool
 static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;
 //! -paytxfee default
@@ -1092,6 +1096,9 @@ public:
     //! Flush wallet (bitdb flush)
     void Flush(bool shutdown=false);
 
+    /** Wallet has loaded */
+    boost::signals2::signal<void ()> NotifyLoad;
+
     /** Wallet is about to be unloaded */
     boost::signals2::signal<void ()> NotifyUnload;
 
-- 
2.18.0.windows.1

