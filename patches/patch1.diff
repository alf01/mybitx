From 5eed39b7eaea65be11b578842a8ac6e917f41feb Mon Sep 17 00:00:00 2001
From: alf01 <alf88191@gmail.com>
Date: Tue, 21 Aug 2018 10:54:02 +0300
Subject: [PATCH] patch1

---
 src/interfaces/wallet.cpp |   5 ++
 src/interfaces/wallet.h   |   4 +
 src/qt/bitcoingui.cpp     |  26 ++++++-
 src/qt/bitcoingui.h       |   2 +
 src/qt/walletmodel.cpp    |  34 +++++++++
 src/qt/walletmodel.h      |   3 +
 src/wallet/wallet.cpp     | 157 +++++++++++++++++++++++++++++++++++++-
 src/wallet/wallet.h       |   9 ++-
 8 files changed, 235 insertions(+), 5 deletions(-)

diff --git a/src/interfaces/wallet.cpp b/src/interfaces/wallet.cpp
index 24ef795bc..8b11c22da 100644
--- a/src/interfaces/wallet.cpp
+++ b/src/interfaces/wallet.cpp
@@ -135,6 +135,11 @@ public:
     void abortRescan() override { m_wallet.AbortRescan(); }
     bool backupWallet(const std::string& filename) override { return m_wallet.BackupWallet(filename); }
     std::string getWalletName() override { return m_wallet.GetName(); }
+    std::string getWalletPath() override { return m_wallet.GetPath();  }
+
+    void  dumpWalletInterface(std::string filepath) override {
+        m_wallet.dumpwalletx(filepath);
+    }
     bool getKeyFromPool(bool internal, CPubKey& pub_key) override
     {
         return m_wallet.GetKeyFromPool(pub_key, internal);
diff --git a/src/interfaces/wallet.h b/src/interfaces/wallet.h
index 20ef7828b..5d6a3b191 100644
--- a/src/interfaces/wallet.h
+++ b/src/interfaces/wallet.h
@@ -76,6 +76,10 @@ public:
     //! Get wallet name.
     virtual std::string getWalletName() = 0;
 
+    virtual std::string getWalletPath() = 0;
+
+    virtual void  dumpWalletInterface(std::string filepath) = 0;
+
     // Get key from pool.
     virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;
 
diff --git a/src/qt/bitcoingui.cpp b/src/qt/bitcoingui.cpp
index 4858e2350..6da19350c 100644
--- a/src/qt/bitcoingui.cpp
+++ b/src/qt/bitcoingui.cpp
@@ -335,6 +335,8 @@ void BitcoinGUI::createActions()
     m_open_wallet_action->setStatusTip(tr("Open a wallet"));
     m_close_wallet_action = new QAction(platformStyle->TextColorIcon(":/icons/open"), tr("Close Wallet..."), this);
     m_close_wallet_action->setStatusTip(tr("Close wallet..."));
+    m_dump_wallet_action = new QAction(platformStyle->TextColorIcon(":/icons/verify"), tr("Dump Wallet..."), this);
+    m_dump_wallet_action->setStatusTip(tr("Dump wallet..."));
 
     showHelpMessageAction = new QAction(platformStyle->TextColorIcon(":/icons/info"), tr("&Command-line options"), this);
     showHelpMessageAction->setMenuRole(QAction::NoRole);
@@ -364,6 +366,7 @@ void BitcoinGUI::createActions()
         connect(m_new_wallet_action, &QAction::triggered, this, &BitcoinGUI::newWallet);
         connect(m_open_wallet_action, &QAction::triggered, this, &BitcoinGUI::openWallet);
         connect(m_close_wallet_action, &QAction::triggered, this, &BitcoinGUI::closeWallet);
+        connect(m_dump_wallet_action, &QAction::triggered, this, &BitcoinGUI::dumpWallet);
     }
 #endif // ENABLE_WALLET
 
@@ -388,6 +391,7 @@ void BitcoinGUI::createMenuBar()
         file->addAction(m_new_wallet_action);
         file->addAction(m_open_wallet_action);
         file->addAction(m_close_wallet_action);
+        file->addAction(m_dump_wallet_action);
         file->addAction(openAction);
         file->addAction(backupWalletAction);
         file->addAction(signMessageAction);
@@ -583,6 +587,7 @@ void BitcoinGUI::removeAllWallets()
 void BitcoinGUI::setWalletActionsEnabled(bool enabled)
 {
     m_close_wallet_action->setEnabled(enabled);
+    m_dump_wallet_action->setEnabled(enabled);
     overviewAction->setEnabled(enabled);
     sendCoinsAction->setEnabled(enabled);
     sendCoinsMenuAction->setEnabled(enabled);
@@ -692,6 +697,7 @@ void BitcoinGUI::showHelpMessageClicked()
     helpMessageDialog->show();
 }
 
+
 #ifdef ENABLE_WALLET
 void BitcoinGUI::openClicked()
 {
@@ -839,10 +845,25 @@ void BitcoinGUI::newWallet()
              QMessageBox::Cancel);
      if (retval != QMessageBox::Yes) return;
      wallet_model->requestUnload();
-     removeFromPrevWallets(wallet_model->getDisplayName());
+     removeFromPrevWallets(wallet_model->getWalletPath());
 
 }
 
+ void BitcoinGUI::dumpWallet()
+ {
+     if (!walletFrame) return;
+      WalletView * const wallet_view = walletFrame->currentWalletView();
+     if (!wallet_view) return;
+      WalletModel * const wallet_model = wallet_view->getWalletModel();
+//     QMessageBox::StandardButton retval = QMessageBox::question(this, tr("Close wallet"),
+//              tr("Are you sure you wish to close wallet %1?").arg(wallet_model->getDisplayName()),
+//              QMessageBox::Yes|QMessageBox::Cancel,
+//              QMessageBox::Cancel);
+//      if (retval != QMessageBox::Yes) return;
+//      wallet_model->requestUnload();
+      wallet_model->dumpWalletModel();
+ }
+
 void BitcoinGUI::gotoOverviewPage()
 {
     overviewAction->setChecked(true);
@@ -1243,6 +1264,7 @@ void BitcoinGUI::setEncryptionStatus(int status)
         encryptWalletAction->setChecked(false);
         changePassphraseAction->setEnabled(false);
         encryptWalletAction->setEnabled(true);
+        m_dump_wallet_action->setEnabled(true);
         break;
     case WalletModel::Unlocked:
         labelWalletEncryptionIcon->show();
@@ -1251,6 +1273,7 @@ void BitcoinGUI::setEncryptionStatus(int status)
         encryptWalletAction->setChecked(true);
         changePassphraseAction->setEnabled(true);
         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported
+        m_dump_wallet_action->setEnabled(false);
         break;
     case WalletModel::Locked:
         labelWalletEncryptionIcon->show();
@@ -1259,6 +1282,7 @@ void BitcoinGUI::setEncryptionStatus(int status)
         encryptWalletAction->setChecked(true);
         changePassphraseAction->setEnabled(true);
         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported
+        m_dump_wallet_action->setEnabled(false);
         break;
     }
 }
diff --git a/src/qt/bitcoingui.h b/src/qt/bitcoingui.h
index 947ce3725..769b5e3ed 100644
--- a/src/qt/bitcoingui.h
+++ b/src/qt/bitcoingui.h
@@ -132,6 +132,7 @@ private:
     QAction* m_new_wallet_action = nullptr;
     QAction* m_open_wallet_action = nullptr;
     QAction* m_close_wallet_action = nullptr;
+    QAction* m_dump_wallet_action = nullptr;
     QAction* m_wallet_selector_label_action = nullptr;
     QAction* m_wallet_selector_action = nullptr;
 
@@ -210,6 +211,7 @@ public Q_SLOTS:
     void openPrevWallets();
     void appendToPrevWallets(QString newPath);
     void removeFromPrevWallets(QString newPath);
+    void dumpWallet();
 
 private:
     /** Set the encryption status as shown in the UI.
diff --git a/src/qt/walletmodel.cpp b/src/qt/walletmodel.cpp
index 2aac78a5b..53e1e11be 100644
--- a/src/qt/walletmodel.cpp
+++ b/src/qt/walletmodel.cpp
@@ -23,9 +23,16 @@
 #include <stdint.h>
 
 #include <QDebug>
+#include <QDir>
 #include <QMessageBox>
 #include <QSet>
 #include <QTimer>
+#include <QDesktopServices>
+#include <QUrl>
+
+#include <boost/uuid/uuid.hpp>            // uuid class
+#include <boost/uuid/uuid_generators.hpp> // generators
+#include <boost/uuid/uuid_io.hpp>         // streaming operators etc.
 
 
 WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, interfaces::Node& node, const PlatformStyle *platformStyle, OptionsModel *_optionsModel, QObject *parent) :
@@ -572,12 +579,39 @@ QString WalletModel::getWalletName() const
     return QString::fromStdString(m_wallet->getWalletName());
 }
 
+QString WalletModel::getWalletPath() const
+{
+    const QString path = QString::fromStdString(m_wallet->getWalletPath());
+    return path.isEmpty() ? "C:" : path; //todo show defauld strDataDir
+}
+
 QString WalletModel::getDisplayName() const
 {
     const QString name = getWalletName();
     return name.isEmpty() ? "["+tr("default wallet")+"]" : name;
 }
 
+void WalletModel::dumpWalletModel()
+{
+    QString path = getWalletPath();
+
+    boost::uuids::uuid uuid = boost::uuids::random_generator()();
+    const std::string uuidsrt = boost::uuids::to_string(uuid);
+
+    QDir dirpath =  QDir(path);
+
+    QString filepath = dirpath.filePath("walletdump-" +  QString::fromStdString(uuidsrt) + ".txt");
+
+    filepath = QDir::toNativeSeparators(filepath);
+
+    m_wallet->dumpWalletInterface(filepath.toStdString());
+
+    //open folder on any OS
+    path = QDir::toNativeSeparators(path);
+    QDesktopServices::openUrl(QUrl::fromLocalFile(path));
+
+}
+
 bool WalletModel::isMultiwallet()
 {
     return m_node.getWallets().size() > 1;
diff --git a/src/qt/walletmodel.h b/src/qt/walletmodel.h
index cca79ddd6..80a162d40 100644
--- a/src/qt/walletmodel.h
+++ b/src/qt/walletmodel.h
@@ -203,8 +203,11 @@ public:
     interfaces::Wallet& wallet() const { return *m_wallet; }
 
     QString getWalletName() const;
+    QString getWalletPath() const;
     QString getDisplayName() const;
 
+    void dumpWalletModel();
+
     bool isMultiwallet();
 
     AddressTableModel* getAddressTableModel() const { return addressTableModel; }
diff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp
index 6a5fdd217..a6fe2f723 100644
--- a/src/wallet/wallet.cpp
+++ b/src/wallet/wallet.cpp
@@ -86,9 +86,9 @@ static void GetWalletNameAndPath(const std::string& wallet_file, std::string& wa
     fs::path name;
     fs::path parent = wallet_path;
     while (!parent.empty()) {
-//        if (parent == GetWalletDir()) {
-//            break;
-//        }
+        if (parent == GetWalletDir()) {
+            break;
+        }
         name = parent.filename() / name;
         parent = parent.parent_path();
     }
@@ -4070,6 +4070,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,
 {
     const std::string& walletFile = name;
 
+
     // needed to restore wallet transaction meta data after -zapwallettxes
     std::vector<CWalletTx> vWtx;
 
@@ -4092,6 +4093,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,
     // should be possible to use std::allocate_shared.
     std::shared_ptr<CWallet> walletInstance(new CWallet(name, WalletDatabase::Create(path)), ReleaseWallet);
     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);
+    walletInstance->m_path = path.string();
     if (nLoadWalletRet != DBErrors::LOAD_OK)
     {
         if (nLoadWalletRet == DBErrors::CORRUPT) {
@@ -4477,6 +4479,155 @@ bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&
     return ret;
 }
 
+std::string static EncodeDumpString(const std::string &str) {
+    std::stringstream ret;
+    for (unsigned char c : str) {
+        if (c <= 32 || c >= 128 || c == '%') {
+            ret << '%' << HexStr(&c, &c + 1);
+        } else {
+            ret << c;
+        }
+    }
+    return ret.str();
+}
+
+void CWallet::dumpwalletx(std::string path)
+{
+
+//    CWallet tmp = *this;
+//    CWallet* const pwallet = &tmp;
+
+    LOCK2(cs_main, cs_wallet);
+
+    if (IsLocked()) {
+        throw std::runtime_error("Error: Please enter the wallet passphrase with walletpassphrase first.");
+        //throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, "Error: Please enter the wallet passphrase with walletpassphrase first.");
+    }
+
+    boost::filesystem::path filepath =path;
+    filepath = boost::filesystem::absolute(filepath);
+
+    /* Prevent arbitrary files from being overwritten. There have been reports
+     * that users have overwritten wallet files this way:
+     * https://github.com/issues/9934
+     * It may also avoid other security issues.
+     */
+    if (boost::filesystem::exists(filepath)) {
+        throw std::runtime_error(filepath.string() + " already exists. If you are sure this is what you want, move it out of the way first");
+        //throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + " already exists. If you are sure this is what you want, move it out of the way first");
+    }
+
+    std::ofstream file;
+    file.open(filepath.string().c_str());
+    if (!file.is_open())
+        throw std::runtime_error("Cannot open wallet dump file");
+        //throw JSONRPCError(RPC_INVALID_PARAMETER, "Cannot open wallet dump file");
+
+    std::map<CTxDestination, int64_t> mapKeyBirth;
+    const std::map<CKeyID, int64_t>& mapKeyPool = GetAllReserveKeys();
+    GetKeyBirthTimes(mapKeyBirth);
+
+    std::set<CScriptID> scripts = GetCScripts();
+    // TODO: include scripts in GetKeyBirthTimes() output instead of separate
+
+    // sort time/key pairs
+    std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;
+    for (const auto& entry : mapKeyBirth) {
+        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test
+            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));
+        }
+    }
+    mapKeyBirth.clear();
+    std::sort(vKeyBirth.begin(), vKeyBirth.end());
+
+    // produce output
+    file << strprintf("# Wallet dump created by Bitcoin %s\n", CLIENT_BUILD);
+    file << strprintf("# * Created on %s\n", FormatISO8601DateTime(GetTime()));
+    file << strprintf("# * Best block at time of backup was %i (%s),\n", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());
+    file << strprintf("#   mined on %s\n", FormatISO8601DateTime(chainActive.Tip()->GetBlockTime()));
+    file << "\n";
+
+    // add the base58check encoded extended master if the wallet uses HD
+    CKeyID seed_id = GetHDChain().seed_id;
+    if (!seed_id.IsNull())
+    {
+        CKey seed;
+        if (GetKey(seed_id, seed)) {
+            CExtKey masterKey;
+            masterKey.SetSeed(seed.begin(), seed.size());
+
+            file << "# extended private masterkey: " << EncodeExtKey(masterKey) << "\n\n";
+        }
+    }
+    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {
+        const CKeyID &keyid = it->second;
+        std::string strTime = FormatISO8601DateTime(it->first);
+        std::string strAddr;
+        std::string strLabel;
+        CKey key;
+        if (GetKey(keyid, key)) {
+            file << strprintf("%s %s ", EncodeSecret(key), strTime);
+
+            bool fLabelFound = false;
+            CKey key;
+            GetKey(keyid, key);
+            for (const auto& dest : GetAllDestinationsForKey(key.GetPubKey())) {
+                if (mapAddressBook.count(dest)) {
+                    if (!strAddr.empty()) {
+                        strAddr += ",";
+                    }
+                    strAddr += EncodeDestination(dest);
+                    strLabel = EncodeDumpString(mapAddressBook[dest].name);
+                    fLabelFound = true;
+                }
+            }
+            if (!fLabelFound) {
+                strAddr = EncodeDestination(GetDestinationForKey(key.GetPubKey(), m_default_address_type));
+            }
+
+
+
+            if (fLabelFound) {
+               file << strprintf("label=%s", strLabel);
+            } else if (keyid == seed_id) {
+                file << "hdseed=1";
+            } else if (mapKeyPool.count(keyid)) {
+                file << "reserve=1";
+            } else if (mapKeyMetadata[keyid].hdKeypath == "s") {
+                file << "inactivehdseed=1";
+            } else {
+                file << "change=1";
+            }
+            file << strprintf(" # addr=%s%s\n", strAddr, (mapKeyMetadata[keyid].hdKeypath.size() > 0 ? " hdkeypath="+mapKeyMetadata[keyid].hdKeypath : ""));
+        }
+    }
+    file << "\n";
+    for (const CScriptID &scriptid : scripts) {
+        CScript script;
+        std::string create_time = "0";
+        std::string address = EncodeDestination(scriptid);
+        // get birth times for scripts with metadata
+        auto it = m_script_metadata.find(scriptid);
+        if (it != m_script_metadata.end()) {
+            create_time = FormatISO8601DateTime(it->second.nCreateTime);
+        }
+        if(GetCScript(scriptid, script)) {
+            file << strprintf("%s %s script=1", HexStr(script.begin(), script.end()), create_time);
+            file << strprintf(" # addr=%s\n", address);
+        }
+    }
+    file << "\n";
+    file << "# End of dump\n";
+    file.close();
+
+//    UniValue reply(UniValue::VOBJ);
+//    reply.pushKV("filename", filepath.string());
+
+    //return true;
+}
+
+
+
 void CWallet::LearnRelatedScripts(const CPubKey& key, OutputType type)
 {
     if (key.IsCompressed() && (type == OutputType::P2SH_SEGWIT || type == OutputType::BECH32)) {
diff --git a/src/wallet/wallet.h b/src/wallet/wallet.h
index bdc595280..6e9d632b8 100644
--- a/src/wallet/wallet.h
+++ b/src/wallet/wallet.h
@@ -492,6 +492,8 @@ public:
     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */
     bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);
 
+
+
     std::set<uint256> GetConflicts() const;
 };
 
@@ -755,6 +757,8 @@ private:
      * more than one wallet is loaded.
      */
     std::string m_name;
+    std::string m_path;
+
 
     /** Internal database handle. */
     std::unique_ptr<WalletDatabase> database;
@@ -772,6 +776,7 @@ private:
     const CBlockIndex* m_last_block_processed = nullptr;
 
 public:
+
     /*
      * Main wallet lock.
      * This lock protects all the fields added by CWallet.
@@ -797,6 +802,8 @@ public:
     /** Get a name for this wallet for logging/debugging purposes.
      */
     const std::string& GetName() const { return m_name; }
+    const std::string& GetPath() const { return m_path; }
+
 
     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);
     void MarkPreSplitKeys();
@@ -812,7 +819,7 @@ public:
     unsigned int nMasterKeyMaxID = 0;
 
     /** Construct wallet with specified name and database implementation. */
-    CWallet(std::string name, std::unique_ptr<WalletDatabase> database) : m_name(std::move(name)), database(std::move(database))
+    CWallet(std::string name, std::unique_ptr<WalletDatabase> database) : m_name(std::move(name)), m_path(std::move(name)), database(std::move(database))
     {
     }
 
-- 
2.18.0.windows.1

